(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Stepper = factory());
}(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var DefOptions = {
        window: typeof window !== 'undefined' ? window : null,
        startStep: 1
    };

    var StepperClassNames;
    (function (StepperClassNames) {
        StepperClassNames["container"] = "stepper";
        StepperClassNames["inner"] = "stepper-inner";
        StepperClassNames["item"] = "stepper-item";
        StepperClassNames["itemActive"] = "is-active";
        StepperClassNames["progress"] = "stepper-progress";
        StepperClassNames["progressItem"] = "stepper-progress-item";
    })(StepperClassNames || (StepperClassNames = {}));
    var StepperClassNames$1 = StepperClassNames;

    function tag(tagName, options) {
        if (options === void 0) { options = {}; }
        var isElement = tagName instanceof Element;
        if (!isElement && typeof tagName !== 'string')
            throw new Error(tagName + " is invalid value of tag");
        var el = (isElement ? tagName : document.createElement(tagName));
        if (options['children'] && Array.isArray(options['children'])) {
            var l = options.children.reverse();
            while (l.length) {
                var a = l.pop();
                if (!(a instanceof Element))
                    continue;
                el.appendChild(a);
            }
        }
        if (options['attr'] && typeof options['attr'] === 'object') {
            for (var k in options['attr']) {
                el.setAttribute(k, options['attr'][k]);
            }
        }
        return el;
    }

    var StepperView = /** @class */ (function () {
        function StepperView(steps, isProgress) {
            this.stepElems = [];
            this.container = this.setup(steps, isProgress);
        }
        StepperView.prototype.setStep = function (prevStep, nextStep) {
            if (prevStep) {
                this.stepElems[prevStep - 1].classList.remove(StepperClassNames$1.itemActive);
            }
            if (nextStep) {
                this.stepElems[nextStep - 1].classList.add(StepperClassNames$1.itemActive);
            }
        };
        StepperView.prototype.getHTML = function () {
            return this.container;
        };
        StepperView.prototype.setup = function (steps, isProgress) {
            if (!isProgress)
                return this.stepper(steps);
            return this.progress(steps);
        };
        StepperView.prototype.stepper = function (steps) {
            var _this = this;
            var c = tag('div', { attr: { "class": StepperClassNames$1.inner } });
            Array.prototype.forEach.call(steps, function (el) {
                c.appendChild(el.cloneNode(true));
                var s = c.children[c.childElementCount - 1];
                _this.stepElems.push(s);
                s.classList.add(StepperClassNames$1.item);
            });
            return c;
        };
        StepperView.prototype.progress = function (steps) {
            var _this = this;
            var c = tag('div', { attr: { "class": StepperClassNames$1.progress } });
            Array.prototype.forEach.call(steps, function (el, i) {
                var el = tag('div', { attr: { "class": StepperClassNames$1.progressItem } });
                el.textContent = (i + 1).toString();
                _this.stepElems.push(el);
                c.appendChild(el);
            });
            return c;
        };
        return StepperView;
    }());

    var Stepper = /** @class */ (function () {
        function Stepper(container, opts) {
            this.eventListenters = { 'change': [] };
            this.options = __assign(__assign({}, DefOptions), opts);
            this.stepsCount = this.getStepsCount(container);
            this.wrapper = this.setup(container, this.options);
            this.currentStep = this.getInitialStep();
            this.onStepChangeCall(this.handleStepChangeCall.bind(this));
            if (!this.isStepsHTMLStructureValid(this.wrapper)) {
                throw new Error();
            }
            this.performStepChange(null, this.currentStep);
        }
        // #region Public API
        Stepper.prototype.destroy = function () {
            for (var key in this) {
                // if (key === 'options') continue;
                delete this[key];
            }
            // cleanup prototype chain
            var p = Object.getPrototypeOf(this);
            while (p) {
                for (var key in p) {
                    delete p[key];
                }
                p = Object.getPrototypeOf(p);
            }
        };
        Stepper.prototype.reset = function () {
            this.frozen = false;
            this.performStepChange(this.currentStep, 1);
        };
        Stepper.prototype.isFrozen = function () {
            return this.frozen;
        };
        Stepper.prototype.freeze = function (isFrozen) {
            this.frozen = isFrozen;
        };
        Stepper.prototype.getCurrentStep = function () {
            return this.currentStep;
        };
        Stepper.prototype.prev = function (cb) {
            this.performStepChange(this.currentStep, this.currentStep - 1, cb);
        };
        Stepper.prototype.next = function (cb) {
            this.performStepChange(this.currentStep, this.currentStep + 1, cb);
        };
        Stepper.prototype.stepTo = function (step, cb) {
            var ok = this.performStepChange(this.currentStep, step, cb);
            if (!ok) {
                console.warn("[Stepper.js]: transiion failed to step: " + step + ". Looks like your step number is not within possible range.");
            }
        };
        // #endregion
        Stepper.prototype.setup = function (container, opts) {
            var wrapper = tag('div', { attr: { "class": StepperClassNames$1.container } });
            this.stepperView = new StepperView(container.children);
            if (opts.progress)
                this.insertProgressView(wrapper, container.children);
            /**
             * insert new HTML
             */
            wrapper.appendChild(this.stepperView.getHTML());
            container.insertAdjacentElement('beforebegin', wrapper);
            /**
             * clean initial container
             */
            if (container.parentElement)
                container.parentElement.removeChild(container);
            return wrapper;
        };
        Stepper.prototype.insertProgressView = function (wrapper, steps) {
            this.progressView = new StepperView(steps, true);
            if (!this.options.progressContainer) {
                wrapper.insertAdjacentElement('afterbegin', this.progressView.getHTML());
            }
            else {
                this.options.progressContainer.innerHTML = '';
                this.options.progressContainer.appendChild(this.progressView.getHTML());
            }
        };
        Stepper.prototype.getStepsCount = function (container) {
            return container.children.length;
        };
        Stepper.prototype.getInitialStep = function () {
            /**
             * 0
             * get from cache
             * get from param
             */
            return this.options.startStep;
        };
        Stepper.prototype.handleStepChangeCall = function (prev, next) {
            this.currentStep = next;
            this.performViewUpdate(prev, next);
        };
        Stepper.prototype.performViewUpdate = function (prev, next) {
            this.setProgressItemActive(prev, next);
            this.stepperView.setStep(prev, next);
        };
        Stepper.prototype.onStepChangeCall = function (cb) {
            this.eventListenters.change.push(cb);
        };
        Stepper.prototype.performStepChange = function (prev, next, cb) {
            next = Number.parseInt(next);
            if (this.frozen) {
                console.warn('[Stepper.js] is frozen');
                return;
            }
            var ok = this.isStepValid(next) && this.isStepChangeValid(prev, next);
            if (!ok)
                return;
            this.eventListenters.change.forEach(function (cb) { return setTimeout(function () { return cb(prev, next); }, 0); });
            if (cb && typeof cb === 'function')
                cb(next);
            return ok;
        };
        Stepper.prototype.isStepValid = function (step) {
            /**
             * Make sure value is always a number
             */
            if (typeof step !== 'number' || !Number.isFinite(step)) {
                console.warn("[Stepper.js] supplied step value is not a number");
                return;
            }
            /**
             * Make sure step is in steps range
             */
            return step >= 1 && step <= this.stepsCount;
        };
        /**
         * Custom validator supplied by user
         */
        Stepper.prototype.isStepChangeValid = function (prev, next) {
            if (!this.options.validateStepChange || typeof this.options.validateStepChange !== 'function')
                return true;
            return this.options.validateStepChange(prev, next);
        };
        Stepper.prototype.setProgressItemActive = function (prev, next) {
            if (!this.progressView)
                return;
            this.progressView.setStep(prev, next);
        };
        Stepper.prototype.isStepsHTMLStructureValid = function (el) {
            return true;
        };
        Stepper.prototype.validateArgs = function () {
        };
        Stepper.prototype.isOptsValid = function () {
        };
        Stepper.prototype.isContainerValid = function () {
        };
        Stepper.prototype.logError = function () {
        };
        return Stepper;
    }());

    return Stepper;

})));
