(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Stepper = factory());
}(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var DefOptions = {
        window: typeof window !== 'undefined' ? window : null,
        startStep: 0
    };

    var StepperClassNames;
    (function (StepperClassNames) {
        StepperClassNames["container"] = "stepper";
        StepperClassNames["inner"] = "stepper-inner";
        StepperClassNames["item"] = "stepper-item";
        StepperClassNames["itemActive"] = "is-active";
        StepperClassNames["progress"] = "stepper-progress";
        StepperClassNames["progressItem"] = "stepper-progress-item";
    })(StepperClassNames || (StepperClassNames = {}));
    var StepperClassNames$1 = StepperClassNames;

    var Stepper = /** @class */ (function () {
        function Stepper(steps) {
            this.steps = steps;
        }
        Stepper.prototype.getStepsCount = function () {
            return this.steps.length;
        };
        Stepper.prototype.getStepsHtml = function () {
            return this.steps;
        };
        Stepper.prototype.getCurrentStep = function () {
            return this.currentStep;
        };
        Stepper.prototype.getStep = function (index) {
            if (!this.isStepValid(index))
                return null;
            var elem = this.steps[index];
            return {
                index: index,
                elem: elem
            };
        };
        Stepper.prototype.setStep = function (index) {
            if (!this.isStepValid(index))
                return [];
            this.prevStep = this.currentStep;
            this.currentStep = {
                index: index,
                elem: this.steps[index]
            };
            return [this.prevStep, this.currentStep];
        };
        Stepper.prototype.isStepValid = function (index) {
            /**
             * Make sure value is always a number
             */
            if (typeof index !== 'number' || !Number.isFinite(index)) {
                console.warn("[Stepper.js] supplied step value is not a number");
                return;
            }
            /**
             * Make sure step is in steps range
             */
            var inRange = index >= 0 && index <= this.getStepsCount() - 1;
            if (!inRange) {
                console.warn("[Stepper.js] cannot perform step change to index: " + index);
            }
            return inRange;
        };
        return Stepper;
    }());

    var StepperView = /** @class */ (function (_super) {
        __extends(StepperView, _super);
        function StepperView(container) {
            var _this = _super.call(this, container.children) || this;
            _this.container = container;
            _this.setup(_this.getStepsHtml());
            return _this;
        }
        StepperView.prototype.setStepActive = function (step) {
            if (!step)
                return;
            var index = step.index;
            var _a = this.setStep(index), prev = _a[0], next = _a[1];
            if (prev)
                prev.elem.classList.remove(StepperClassNames$1.itemActive);
            if (next)
                next.elem.classList.add(StepperClassNames$1.itemActive);
            if (this.progress) {
                this.progress.setActive(next.index);
            }
        };
        StepperView.prototype.setProgress = function (progress) {
            if (this.progress) {
                console.warn('[Stepper.js] progress already setup!');
                return;
            }
            this.progress = progress;
            this.setupProgress(this.progress);
        };
        StepperView.prototype.getProgress = function () {
            return this.progress;
        };
        StepperView.prototype.setupProgress = function (progress) {
            var opts = progress.getOpts();
            if (typeof opts === 'object') {
                if (!opts.container)
                    this.container.insertAdjacentElement('beforebegin', progress.getHTML());
            }
        };
        StepperView.prototype.setup = function (steps) {
            Array.prototype.forEach.call(steps, function (v) {
                v.classList.add(StepperClassNames$1.item);
            });
        };
        return StepperView;
    }(Stepper));

    function tag(tagName, options) {
        if (options === void 0) { options = {}; }
        var isElement = tagName instanceof Element;
        if (!isElement && typeof tagName !== 'string')
            throw new Error(tagName + " is invalid value of tag");
        var el = (isElement ? tagName : document.createElement(tagName));
        if (options['children'] && Array.isArray(options['children'])) {
            var l = options.children.reverse();
            while (l.length) {
                var a = l.pop();
                if (!(a instanceof Element))
                    continue;
                el.appendChild(a);
            }
        }
        if (options['attr'] && typeof options['attr'] === 'object') {
            for (var k in options['attr']) {
                el.setAttribute(k, options['attr'][k]);
            }
        }
        return el;
    }

    var ProgressView = /** @class */ (function () {
        function ProgressView(stepsCount, opts) {
            this.opts = typeof opts === 'object' ? opts : {};
            this.container = this.setupContainer(this.opts.container);
            this.progressItems = this.setupItems(stepsCount, this.container);
        }
        ProgressView.prototype.getHTML = function () {
            return this.container;
        };
        ProgressView.prototype.setActive = function (index) {
            if (!this.progressItems[index])
                return;
            var canSkipLoopAll = (this.currentIndex - 1 === index) || (this.currentIndex + 1 === index);
            /**
             * Assume that 'all' prev items is active and dont loop over all items.
             * Begin from target index.
             */
            var i = index <= 0 || !canSkipLoopAll && !this.isPrevItemActive(index) ? 0 : index;
            while (i <= this.progressItems.length - 1) {
                var item = this.progressItems[i];
                if (i <= index)
                    item.classList.add('is-active');
                if (i > index)
                    item.classList.remove('is-active');
                /**
                 * Assume that 'all' next items is not active so not necessary to loop over them.
                 */
                if (canSkipLoopAll && !this.isNextItemActive(i))
                    break;
                i++;
            }
            this.currentIndex = index;
        };
        ProgressView.prototype.getOpts = function () {
            return this.opts;
        };
        ProgressView.prototype.isPrevItemActive = function (index) {
            var prev = index - 1;
            return prev >= 0 && this.progressItems[prev].classList.contains('is-active');
        };
        ProgressView.prototype.isNextItemActive = function (index) {
            var next = index + 1;
            return next <= this.progressItems.length - 1 && this.progressItems[next].classList.contains('is-active');
        };
        ProgressView.prototype.setupContainer = function (container) {
            if (container) {
                container.classList.add(StepperClassNames$1.progress);
                return container;
            }
            return tag('div', { attr: { "class": StepperClassNames$1.progress } });
        };
        ProgressView.prototype.setupItems = function (stepsCount, container) {
            var _this = this;
            var c = [];
            var _loop_1 = function () {
                var el = tag('div', { attr: { "class": StepperClassNames$1.progressItem } });
                var num = c.length + 1;
                el.textContent = num.toString();
                if (this_1.opts.navEnabled) {
                    el.addEventListener('click', function (ev) {
                        if (_this.onClick)
                            _this.onClick(num - 1);
                    });
                }
                c.push(el);
                container.appendChild(el);
            };
            var this_1 = this;
            while (c.length !== stepsCount) {
                _loop_1();
            }
            return c;
        };
        return ProgressView;
    }());

    var Stepper$1 = /** @class */ (function () {
        function Stepper(container, opts) {
            this.eventListenters = { 'change': [] };
            this.options = __assign(__assign({}, DefOptions), opts);
            this.setup(container, this.options);
            this.onStepChangeCall(this.handleStepChangeCall.bind(this));
            this.performStepChange(this.getInitialStep().index);
        }
        // #region Public API
        Stepper.prototype.destroy = function () {
            for (var key in this) {
                // if (key === 'options') continue;
                delete this[key];
            }
            // cleanup prototype chain
            var p = Object.getPrototypeOf(this);
            while (p) {
                for (var key in p) {
                    delete p[key];
                }
                p = Object.getPrototypeOf(p);
            }
        };
        Stepper.prototype.reset = function () {
            this.frozen = false;
            this.performStepChange(0);
        };
        Stepper.prototype.isFrozen = function () {
            return this.frozen;
        };
        Stepper.prototype.freeze = function (isFrozen) {
            this.frozen = isFrozen;
        };
        Stepper.prototype.getCurrentStep = function () {
            return this.stepperView.getCurrentStep();
        };
        Stepper.prototype.prev = function (cb) {
            this.performStepChange(this.stepperView.getCurrentStep().index - 1, cb);
        };
        Stepper.prototype.next = function (cb) {
            this.performStepChange(this.stepperView.getCurrentStep().index + 1, cb);
        };
        Stepper.prototype.stepTo = function (stepIndex, cb) {
            this.performStepChange(stepIndex, cb);
        };
        // #endregion
        Stepper.prototype.setup = function (container, opts) {
            this.stepperView = new StepperView(container);
            if (opts.progress) {
                this.setupProgress(opts.progress);
            }
        };
        Stepper.prototype.setupProgress = function (opts) {
            var _this = this;
            var p = new ProgressView(this.stepperView.getStepsCount(), opts);
            this.stepperView.setProgress(p);
            if (p.getOpts().navEnabled)
                p.onClick = function (n) { return _this.performStepChange(n); };
        };
        Stepper.prototype.getInitialStep = function () {
            /**
             * get from cache
             * get from param
             */
            /**
             * Steps HTMLElement[] items index is zero-based.
             */
            return this.stepperView.getStep(this.options.startStep);
        };
        Stepper.prototype.handleStepChangeCall = function (prev, next) {
            this.stepperView.setStepActive(next);
        };
        Stepper.prototype.onStepChangeCall = function (cb) {
            this.eventListenters.change.push(cb);
        };
        Stepper.prototype.performStepChange = function (nextIndex, cb) {
            nextIndex = Number.parseInt(nextIndex);
            var prev = this.stepperView.getCurrentStep();
            var next = this.stepperView.getStep(nextIndex);
            var ok = this.canPerformStepChange(prev, next);
            if (!ok)
                return;
            this.eventListenters.change.forEach(function (cb) { return setTimeout(function () { return cb(prev, next); }, 0); });
            if (cb && typeof cb === 'function')
                cb(next);
            return ok;
        };
        /**
         * Custom validator supplied by user
         */
        Stepper.prototype.canPerformStepChange = function (prev, next) {
            if (this.frozen) {
                console.warn('[Stepper.js] is frozen');
                return;
            }
            if (!this.options.validateStepChange ||
                typeof this.options.validateStepChange !== 'function')
                return true;
            var ok = this.options.validateStepChange(prev, next);
            if (!ok) {
                console.warn('[Stepper.js]: step change did not pass validation. Check your validateStepChange()');
            }
            return ok;
        };
        Stepper.prototype.validateArgs = function () {
        };
        Stepper.prototype.isOptsValid = function () {
        };
        Stepper.prototype.isContainerValid = function () {
        };
        Stepper.prototype.logError = function () {
        };
        return Stepper;
    }());

    return Stepper$1;

})));
