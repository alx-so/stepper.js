(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Stepper = factory());
}(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var DefOptions = {
        window: typeof window !== 'undefined' ? window : null,
        startStep: 0
    };

    var StepperClassNames;
    (function (StepperClassNames) {
        StepperClassNames["container"] = "stepper";
        StepperClassNames["inner"] = "stepper-inner";
        StepperClassNames["item"] = "stepper-item";
        StepperClassNames["itemActive"] = "is-active";
        StepperClassNames["progress"] = "stepper-progress";
        StepperClassNames["progressItem"] = "stepper-progress-item";
    })(StepperClassNames || (StepperClassNames = {}));
    var StepperClassNames$1 = StepperClassNames;

    function tag(tagName, options) {
        if (options === void 0) { options = {}; }
        var isElement = tagName instanceof Element;
        if (!isElement && typeof tagName !== 'string')
            throw new Error(tagName + " is invalid value of tag");
        var el = (isElement ? tagName : document.createElement(tagName));
        if (options['children'] && Array.isArray(options['children'])) {
            var l = options.children.reverse();
            while (l.length) {
                var a = l.pop();
                if (!(a instanceof Element))
                    continue;
                el.appendChild(a);
            }
        }
        if (options['attr'] && typeof options['attr'] === 'object') {
            for (var k in options['attr']) {
                el.setAttribute(k, options['attr'][k]);
            }
        }
        return el;
    }

    var ProgressView = /** @class */ (function () {
        function ProgressView(stepsCount, opts) {
            this.opts = typeof opts === 'object' ? opts : {};
            this.container = this.setupContainer(this.opts.container);
            this.progressItems = this.setupItems(stepsCount, this.container);
        }
        ProgressView.prototype.getHTML = function () {
            return this.container;
        };
        ProgressView.prototype.setActive = function (index) {
            if (!this.progressItems[index])
                return;
            var canSkipLoopAll = (this.currentIndex - 1 === index) || (this.currentIndex + 1 === index);
            /**
             * Assume that 'all' prev items is active and dont loop over all items.
             * Begin from target index.
             */
            var i = index <= 0 || !canSkipLoopAll && !this.isPrevItemActive(index) ? 0 : index;
            while (i <= this.progressItems.length - 1) {
                var item = this.progressItems[i];
                if (i <= index)
                    item.classList.add('is-active');
                if (i > index)
                    item.classList.remove('is-active');
                /**
                 * Assume that 'all' next items is not active so not necessary to loop over them.
                 */
                if (canSkipLoopAll && !this.isNextItemActive(i))
                    break;
                i++;
            }
            this.currentIndex = index;
        };
        ProgressView.prototype.getOpts = function () {
            return this.opts;
        };
        ProgressView.prototype.isPrevItemActive = function (index) {
            var prev = index - 1;
            return prev >= 0 && this.progressItems[prev].classList.contains('is-active');
        };
        ProgressView.prototype.isNextItemActive = function (index) {
            var next = index + 1;
            return next <= this.progressItems.length - 1 && this.progressItems[next].classList.contains('is-active');
        };
        ProgressView.prototype.setupContainer = function (container) {
            if (container) {
                container.classList.add(StepperClassNames$1.progress);
                return container;
            }
            return tag('div', { attr: { "class": StepperClassNames$1.progress } });
        };
        ProgressView.prototype.setupItems = function (stepsCount, container) {
            var _this = this;
            var c = [];
            var _loop_1 = function () {
                var el = tag('div', { attr: { "class": StepperClassNames$1.progressItem } });
                var num = c.length + 1;
                el.textContent = num.toString();
                if (this_1.opts.navEnabled) {
                    el.addEventListener('click', function (ev) {
                        if (_this.onClick)
                            _this.onClick(num - 1);
                    });
                }
                c.push(el);
                container.appendChild(el);
            };
            var this_1 = this;
            while (c.length !== stepsCount) {
                _loop_1();
            }
            return c;
        };
        return ProgressView;
    }());

    var Stepper = /** @class */ (function () {
        function Stepper(steps) {
            this.steps = steps;
        }
        Stepper.prototype.getStepsCount = function () {
            return this.steps.length;
        };
        Stepper.prototype.getStepsHtml = function () {
            return this.steps;
        };
        Stepper.prototype.getCurrentStep = function () {
            return this.currentStep;
        };
        Stepper.prototype.getStep = function (index) {
            if (!this.isStepIndexValid(index))
                return null;
            var elem = this.steps[index];
            return {
                index: index,
                elem: elem
            };
        };
        Stepper.prototype.setStep = function (index) {
            if (!this.isStepIndexValid(index) || !this.isStepInRange(index))
                return [];
            this.prevStep = this.currentStep;
            this.currentStep = {
                index: index,
                elem: this.steps[index]
            };
            return [this.prevStep, this.currentStep];
        };
        Stepper.prototype.isStepIndexValid = function (index) {
            /**
             * Make sure value is always a number
             */
            var ok = typeof index === 'number' && Number.isFinite(index);
            if (!ok) {
                console.warn("[Stepper.js] supplied step value is not a number");
            }
            return ok;
        };
        Stepper.prototype.isStepInRange = function (index) {
            /**
             * Make sure step is in steps range
             */
            var ok = index >= 0 && index <= this.getStepsCount() - 1;
            if (!ok) {
                console.warn("[Stepper.js] cannot perform step change to index: " + index);
            }
            return ok;
        };
        return Stepper;
    }());

    var StepperView = /** @class */ (function (_super) {
        __extends(StepperView, _super);
        function StepperView(container, opts) {
            var _this = _super.call(this, container.children) || this;
            _this.container = container;
            _this.opts = opts;
            _this.setup(_this.getStepsHtml());
            if (opts.progress)
                _this.setupProgress(opts.progress);
            _this.setStepActive(opts.index);
            return _this;
        }
        StepperView.prototype.setStepActive = function (index) {
            if (!Number.isFinite(index))
                return;
            var _a = this.setStep(index), prev = _a[0], next = _a[1];
            if (prev)
                prev.elem.classList.remove(StepperClassNames$1.itemActive);
            if (next)
                next.elem.classList.add(StepperClassNames$1.itemActive);
            if (this.progress && next) {
                this.progress.setActive(next.index);
            }
        };
        StepperView.prototype.getProgress = function () {
            return this.progress;
        };
        StepperView.prototype.setupProgress = function (opts) {
            var _this = this;
            var p = new ProgressView(this.getStepsCount(), opts);
            opts = p.getOpts();
            if (typeof opts === 'object') {
                if (!opts.container)
                    this.container.insertAdjacentElement('beforebegin', p.getHTML());
            }
            if (opts.navEnabled && typeof this.opts.progressClickHandler === 'function') {
                p.onClick = function (n) { return _this.opts.progressClickHandler(n); };
            }
            this.progress = p;
        };
        StepperView.prototype.setup = function (steps) {
            Array.prototype.forEach.call(steps, function (v) {
                v.classList.add(StepperClassNames$1.item);
            });
        };
        return StepperView;
    }(Stepper));

    var Stepper$1 = /** @class */ (function () {
        function Stepper(container, opts) {
            this.eventListenters = { 'change': [] };
            this.options = __assign(__assign({}, DefOptions), opts);
            this.state = this.getInitialState();
            this.stepperView = new StepperView(container, this.composeStepperViewOpts(this.options));
            this.onStateChange(this.handleStateChange.bind(this));
        }
        // #region Public API
        Stepper.prototype.destroy = function () {
            for (var key in this) {
                // if (key === 'options') continue;
                delete this[key];
            }
            // cleanup prototype chain
            var p = Object.getPrototypeOf(this);
            while (p) {
                for (var key in p) {
                    delete p[key];
                }
                p = Object.getPrototypeOf(p);
            }
        };
        Stepper.prototype.reset = function () {
            var step = this.stepperView.getStep(0);
            this.setState(__assign(__assign({}, this.state), { isFrozen: false, step: step }));
        };
        Stepper.prototype.isFrozen = function () {
            return this.state.isFrozen;
        };
        Stepper.prototype.freeze = function (isFrozen) {
            this.setState(__assign(__assign({}, this.state), { isFrozen: isFrozen }));
        };
        Stepper.prototype.getCurrentStep = function () {
            return this.state.step;
        };
        Stepper.prototype.prev = function () {
            this.performStepChange(this.stepperView.getCurrentStep().index - 1);
        };
        Stepper.prototype.next = function () {
            this.performStepChange(this.stepperView.getCurrentStep().index + 1);
        };
        Stepper.prototype.stepTo = function (index) {
            this.performStepChange(index);
        };
        // #endregion
        Stepper.prototype.composeStepperViewOpts = function (opts) {
            var _this = this;
            return {
                index: opts.startStep,
                progress: opts.progress,
                progressClickHandler: function (n) { _this.performStepChange(n); }
            };
        };
        Stepper.prototype.handleStateChange = function (prev, next) {
            this.stepperView.setStepActive(next.step.index);
        };
        Stepper.prototype.onStateChange = function (cb) {
            this.eventListenters.change.push(cb);
        };
        Stepper.prototype.performStepChange = function (nextIndex) {
            nextIndex = Number.parseInt(nextIndex);
            var prev = this.stepperView.getCurrentStep();
            var next = this.stepperView.getStep(nextIndex);
            if (!next)
                return;
            var ok = this.canPerformStepChange(prev, next);
            if (!ok)
                return;
            this.setState(__assign(__assign({}, this.state), { step: next }));
            return ok;
        };
        /**
         * Custom validator
         */
        Stepper.prototype.canPerformStepChange = function (prev, next) {
            if (this.state.isFrozen) {
                console.warn('[Stepper.js] is frozen');
                return;
            }
            if (!this.options.validateStepChange ||
                typeof this.options.validateStepChange !== 'function')
                return true;
            var ok = this.options.validateStepChange(prev, next);
            if (!ok) {
                console.warn('[Stepper.js]: step change did not pass validation. Check your validateStepChange()');
            }
            return ok;
        };
        Stepper.prototype.getInitialState = function () {
            // or get from localeStorage if options.cache: true
            return {
                isFrozen: false,
                step: null
            };
        };
        Stepper.prototype.setState = function (state) {
            var prevState = this.state;
            this.eventListenters.change.forEach(function (cb) { return setTimeout(function () { return cb(prevState, state); }, 0); });
            this.state = state;
        };
        Stepper.prototype.validateArgs = function () {
        };
        Stepper.prototype.isOptsValid = function () {
        };
        Stepper.prototype.isContainerValid = function () {
        };
        Stepper.prototype.logError = function () {
        };
        return Stepper;
    }());

    return Stepper$1;

})));
