(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Stepper = factory());
}(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var DefOptions = {
        startIndex: 0,
        className: {
            progressContainer: 'stepper-progress',
            progressItem: 'stepper-progress-item',
            progressActive: 'is-active',
            stepsContainer: 'stepper',
            stepItem: 'stepper-item',
            stepActive: 'is-active'
        }
    };

    var EventName;
    (function (EventName) {
        EventName["beforeSetup"] = "stepper.before.setup";
        EventName["afterSetup"] = "stepper.after.setup";
        EventName["beforeDestroy"] = "stepper.before.destroy";
        EventName["afterDestroy"] = "stepper.after.destroy";
        EventName["beforeReset"] = "stepper.before.reset";
        EventName["afterReset"] = "stepper.after.reset";
        EventName["beforeChange"] = "stepper.before.change";
        EventName["afterChange"] = "stepper.after.change";
    })(EventName || (EventName = {}));
    var EventName$1 = EventName;

    function tag(tagName, options) {
        if (options === void 0) { options = {}; }
        var isElement = tagName instanceof Element;
        if (!isElement && typeof tagName !== 'string')
            throw new Error(tagName + " is invalid value of tag");
        var el = (isElement ? tagName : document.createElement(tagName));
        if (options['children'] && Array.isArray(options['children'])) {
            var l = options.children.reverse();
            while (l.length) {
                var a = l.pop();
                if (!(a instanceof Element))
                    continue;
                el.appendChild(a);
            }
        }
        if (options['attr'] && typeof options['attr'] === 'object') {
            for (var k in options['attr']) {
                el.setAttribute(k, options['attr'][k]);
            }
        }
        return el;
    }

    var ProgressView = /** @class */ (function () {
        function ProgressView(stepsCount, className, opts) {
            this.currentIndex = 0;
            if (typeof opts !== 'object')
                opts = {};
            this.className = className;
            this.opts = opts;
            this.container = this.setupContainer(this.opts.container);
            this.progressItems = this.setupItems(stepsCount, this.container);
        }
        ProgressView.prototype.getHTML = function () {
            return this.container;
        };
        ProgressView.prototype.setActive = function (index) {
            if (!this.progressItems[index])
                return;
            var canSkipLoopAll = (this.currentIndex - 1 === index) || (this.currentIndex + 1 === index);
            /**
             * Assume that 'all' prev items is active and dont loop over all items.
             * Begin from target index.
             */
            var i = index <= 0 || !canSkipLoopAll && !this.isPrevItemActive(index) ? 0 : index;
            while (i <= this.progressItems.length - 1) {
                var item = this.progressItems[i];
                if (i <= index)
                    item.classList.add(this.className.progressActive);
                if (i > index)
                    item.classList.remove(this.className.progressActive);
                /**
                 * Assume that 'all' next items is not active so not necessary to loop over them.
                 */
                if (canSkipLoopAll && !this.isNextItemActive(i))
                    break;
                i++;
            }
            this.currentIndex = index;
        };
        ProgressView.prototype.getOpts = function () {
            return this.opts;
        };
        ProgressView.prototype.isPrevItemActive = function (index) {
            var prev = index - 1;
            return prev >= 0 &&
                this.progressItems[prev].classList.contains(this.className.progressActive);
        };
        ProgressView.prototype.isNextItemActive = function (index) {
            var next = index + 1;
            return next <= this.progressItems.length - 1 &&
                this.progressItems[next].classList.contains(this.className.progressActive);
        };
        ProgressView.prototype.setupContainer = function (container) {
            if (container) {
                container.classList.add(this.className.progressContainer);
                return container;
            }
            return tag('div', { attr: { class: this.className.progressContainer } });
        };
        ProgressView.prototype.setupItems = function (stepsCount, container) {
            var _this = this;
            var c = [];
            var _loop_1 = function () {
                var el = tag('div', { attr: { class: this_1.className.progressItem } });
                var num = c.length + 1;
                el.textContent = num.toString();
                if (this_1.opts.clickHandler) {
                    el.addEventListener('click', function (ev) {
                        if (_this.opts.clickHandler)
                            _this.opts.clickHandler(num - 1);
                    });
                }
                c.push(el);
                container.appendChild(el);
            };
            var this_1 = this;
            while (c.length !== stepsCount) {
                _loop_1();
            }
            return c;
        };
        return ProgressView;
    }());

    var StepperBase = /** @class */ (function () {
        function StepperBase(steps, initialStepIndex) {
            if (initialStepIndex === void 0) { initialStepIndex = 0; }
            this.steps = steps;
            this.currentStep = {
                index: initialStepIndex,
                elem: this.steps[initialStepIndex]
            };
        }
        StepperBase.prototype.getStepsCount = function () {
            return this.steps.length;
        };
        StepperBase.prototype.getStepsHtml = function () {
            return this.steps;
        };
        StepperBase.prototype.getCurrentStep = function () {
            return this.currentStep;
        };
        StepperBase.prototype.getStep = function (index) {
            if (!this.isStepIndexValid(index))
                return;
            var elem = this.steps[index];
            if (!elem)
                return;
            return {
                index: index,
                elem: elem
            };
        };
        StepperBase.prototype.setStep = function (index) {
            if (!this.isStepIndexValid(index) || !this.isStepInRange(index)) {
                return [this.currentStep];
            }
            this.prevStep = this.currentStep;
            this.currentStep = {
                index: index,
                elem: this.steps[index]
            };
            return [this.prevStep, this.currentStep];
        };
        StepperBase.prototype.isStepIndexValid = function (index) {
            /**
             * Make sure value is always a number
             */
            var ok = typeof index === 'number' && isFinite(index);
            if (!ok) {
                console.warn("[Stepper.js] supplied step value is not a number");
            }
            return ok;
        };
        StepperBase.prototype.isStepInRange = function (index) {
            /**
             * Make sure step is in steps range
             */
            var ok = index >= 0 && index <= this.getStepsCount() - 1;
            if (!ok) {
                console.warn("[Stepper.js] cannot perform step change to index: " + index);
            }
            return ok;
        };
        return StepperBase;
    }());

    var StepperView = /** @class */ (function (_super) {
        __extends(StepperView, _super);
        function StepperView(container, opts) {
            var _this = _super.call(this, container.children, opts.index) || this;
            _this.opts = opts;
            _this.container = container;
            if (opts.progress) {
                _this.progress = _this.setupProgress();
            }
            _this.setup(_this.getStepsHtml());
            return _this;
        }
        StepperView.prototype.setStepActive = function (index) {
            if (!isFinite(index))
                return;
            var _a = this.setStep(index), prev = _a[0], next = _a[1];
            this.setStepClassActive(prev, next);
            if (this.progress && next) {
                this.progress.setActive(next.index);
            }
        };
        StepperView.prototype.getHTML = function () {
            return this.container;
        };
        StepperView.prototype.getProgress = function () {
            return this.progress;
        };
        StepperView.prototype.setStepClassActive = function (prev, next) {
            if (prev)
                prev.elem.classList.remove(this.opts.className.stepActive);
            if (next)
                next.elem.classList.add(this.opts.className.stepActive);
        };
        StepperView.prototype.setupProgress = function () {
            var p = new ProgressView(this.getStepsCount(), this.opts.className, this.opts.progress);
            if (this.opts.progress && !this.opts.progress.container) {
                this.container.insertAdjacentElement('beforebegin', p.getHTML());
            }
            return p;
        };
        StepperView.prototype.setup = function (steps) {
            var _this = this;
            this.container.classList.add(this.opts.className.stepsContainer);
            Array.prototype.forEach.call(steps, function (v) {
                v.classList.add(_this.opts.className.stepItem);
                v.classList.remove(_this.opts.className.stepActive);
            });
            // set initial active className
            this.setStepClassActive(undefined, this.getCurrentStep());
            if (this.progress)
                this.progress.setActive(this.opts.index);
        };
        return StepperView;
    }(StepperBase));

    (function () {
        if (typeof window.CustomEvent === "function")
            return false;
        function CustomEvent(event, params) {
            params = params || { bubbles: false, cancelable: false, detail: null };
            var evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
            return evt;
        }
        window.CustomEvent = CustomEvent;
    })();
    function dispatchEvent(target, type, detail) {
        var event = new CustomEvent(type, {
            bubbles: true,
            cancelable: true,
            detail: detail
        });
        target.dispatchEvent(event);
    }

    var Stepper = /** @class */ (function () {
        function Stepper(container, opts) {
            this.cacheId = 'stepper_data';
            this.eventListenters = { 'change': [] };
            this.setup(container, opts);
        }
        // #region Public API
        Stepper.prototype.prev = function () {
            this.performStepChange(this.stepperView.getCurrentStep().index - 1);
        };
        Stepper.prototype.next = function () {
            this.performStepChange(this.stepperView.getCurrentStep().index + 1);
        };
        Stepper.prototype.stepTo = function (index) {
            this.performStepChange(index);
        };
        Stepper.prototype.getCurrentStep = function () {
            return this.state.step;
        };
        Stepper.prototype.freeze = function (isFrozen) {
            this.setState(__assign(__assign({}, this.state), { isFrozen: isFrozen }));
        };
        Stepper.prototype.isFrozen = function () {
            return this.state.isFrozen;
        };
        Stepper.prototype.setup = function (container, opts) {
            dispatchEvent(container, EventName$1.beforeSetup);
            this.options = __assign(__assign(__assign({}, DefOptions), opts), { className: __assign(__assign({}, DefOptions.className), opts.className) });
            this.state = this.getInitialState();
            this.stepperView = new StepperView(container, this.composeStepperViewOpts(container.children.length, this.options, this.state));
            this.onStateChange(this.handleStateChange.bind(this));
            this.dispatchStepperEvent(EventName$1.afterSetup);
        };
        Stepper.prototype.destroy = function () {
            this.dispatchStepperEvent(EventName$1.beforeDestroy);
            for (var key in this) {
                /** Don't delete external opts object */
                if (key === 'options')
                    continue;
                delete this[key];
            }
            /** Clean prototype chain */
            var p = Object.getPrototypeOf(this);
            while (p) {
                for (var key in p) {
                    delete p[key];
                }
                p = Object.getPrototypeOf(p);
            }
            this.dispatchStepperEvent(EventName$1.afterDestroy);
        };
        Stepper.prototype.reset = function () {
            this.dispatchStepperEvent(EventName$1.beforeReset);
            this.performStepChange(0, false);
            this.dispatchStepperEvent(EventName$1.afterReset);
        };
        // #endregion
        Stepper.prototype.handleStateChange = function (prev, next) {
            if (next.step)
                this.stepperView.setStepActive(next.step.index);
            this.dispatchStepperEvent(EventName$1.afterChange, {
                currentStep: next.step
            });
        };
        Stepper.prototype.onStateChange = function (cb) {
            this.eventListenters.change.push(cb);
        };
        Stepper.prototype.performStepChange = function (nextIndex, shouldValidate) {
            if (shouldValidate === void 0) { shouldValidate = true; }
            nextIndex = parseInt(nextIndex);
            var prev = this.stepperView.getCurrentStep();
            var next = this.stepperView.getStep(nextIndex);
            if (!next)
                return false;
            this.dispatchStepperEvent(EventName$1.beforeChange, {
                currentStep: prev,
                nextStep: next
            });
            var ok = true;
            if (shouldValidate) {
                ok = this.canPerformStepChange(prev, next);
            }
            if (!ok)
                return false;
            this.setState(__assign(__assign({}, this.state), { step: next }));
            return ok;
        };
        Stepper.prototype.canPerformStepChange = function (prev, next) {
            if (this.state.isFrozen) {
                console.warn('[Stepper.js] is frozen');
                return false;
            }
            if (!this.options.validateStepChange ||
                typeof this.options.validateStepChange !== 'function')
                return true;
            var ok = this.options.validateStepChange(prev, next);
            if (!ok) {
                console.warn('[Stepper.js]: step change did not pass validateStepChange()');
            }
            return ok;
        };
        Stepper.prototype.getInitialState = function () {
            if (this.options.cache && localStorage) {
                try {
                    var s = localStorage.getItem(this.cacheId);
                    if (s) {
                        var state = JSON.parse(s);
                        if (state && this.isStateValid(state))
                            return state;
                    }
                }
                catch (e) {
                    console.warn('[Stepper.js] failed to parse cached state. Using default');
                }
            }
            return {
                isFrozen: false
            };
        };
        Stepper.prototype.composeStepperViewOpts = function (stepsCount, opts, state) {
            var _this = this;
            var index = getInitialIndex();
            var progress = (function () {
                if (typeof opts.progress === 'object' && opts.progress.navEnabled) {
                    return __assign(__assign({}, opts.progress), { clickHandler: function (n) { _this.performStepChange(n); } });
                }
                return opts.progress;
            })();
            return {
                index: index,
                className: opts.className,
                progress: progress
            };
            /**
             * Get index by priority: 1 is highest
             *
             * 1. UrlParam
             * 2. Cache
             * 3. opts
             */
            function getInitialIndex() {
                var index = state.step ? state.step.index : opts.startIndex;
                if (opts.urlParam) {
                    var k_1 = typeof opts.urlParam === 'string' ? opts.urlParam : 'step';
                    var v = (function () {
                        var pList = window.location.search.split('&');
                        var sParam = pList.filter(function (v) { return v.indexOf(k_1 + "=") !== -1; });
                        if (sParam.length === 1) {
                            var sVal = parseInt(sParam[0].split('=')[1]);
                            if (typeof sVal === 'number' && sVal >= 0)
                                return sVal;
                        }
                    })();
                    if (typeof v !== 'number') {
                        console.warn("[Stepper.js] supplied urlParam is not valid");
                    }
                    else if (v > stepsCount - 1 || v < 0) {
                        console.warn("[Stepper.js] supplied urlParam '" + k_1 + "=' is not in range.");
                    }
                    else {
                        index = v;
                    }
                }
                return index;
            }
        };
        Stepper.prototype.setState = function (state) {
            var prevState = this.state;
            this.eventListenters.change.forEach(function (cb) { return setTimeout(function () { return cb(prevState, state); }, 0); });
            this.state = state;
            if (this.options.cache) {
                this.saveState(this.state);
            }
        };
        Stepper.prototype.saveState = function (s) {
            var _this = this;
            if (!localStorage)
                return;
            /** Dont save html elem */
            var replacer = function (k, v) {
                if (k === 'elem') {
                    return;
                }
                return v;
            };
            setTimeout(function () { return localStorage.setItem(_this.cacheId, JSON.stringify(s, replacer)); }, 0);
        };
        Stepper.prototype.isStateValid = function (s) {
            return typeof s.step === 'object' && isFinite(s.step.index);
        };
        Stepper.prototype.dispatchStepperEvent = function (event, detail) {
            dispatchEvent(this.stepperView.getHTML(), event, detail);
        };
        Stepper.prototype.validateArgs = function () {
        };
        Stepper.prototype.isOptsValid = function () {
        };
        Stepper.prototype.isContainerValid = function () {
        };
        Stepper.prototype.logError = function () {
        };
        return Stepper;
    }());

    return Stepper;

})));
